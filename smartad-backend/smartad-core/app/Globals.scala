import java.io.File
import play.api.db.slick.ddl.TableScanner
import play.api.libs.Files
import play.api.{Mode, Application, GlobalSettings}

object Global extends GlobalSettings {

  private val configKey = "slick"
  private val ScriptDirectory = "conf/evolutions/"
  private val CreateScript = "create-database.sql"
  private val DropScript = "drop-database.sql"
  private val ScriptHeader = "-- SQL DDL script\n-- Generated by scala script file at Global.scala - do not edit\n\n"

/**
 * http://slick.typesafe.com/doc/2.1.0/code-generation.html#standalone-use
 * Creates SQL DDL scripts on application start-up.
 */

  override def onStart(application: Application) {
      println("=========================== Global.scala ==========================================")      
      println("" + application.mode)
      println("=========================== Global.scala ==========================================")      

    if (application.mode != Mode.Prod) {
      application.configuration.getConfig(configKey).foreach { configuration =>
        configuration.keys.foreach { database =>
	
          val databaseConfiguration = configuration.getString(database).getOrElse{
            throw configuration.reportError(database, "Missing values for key " + database, None)
          }
  
          val packageNames = databaseConfiguration.split(",").toSet
	  println("=========================== Global.scala ==========================================")      
	  println("configKey =>" + configKey)
	  println("database  =>" + database)
	  println("databaseConfiguration/packageName  =>" + databaseConfiguration)
          println("=========================== Global.scala ==========================================")      
  
          val ddls = TableScanner.reflectAllDDLMethods(packageNames, scala.slick.driver.MySQLDriver , application.classloader)

          val scriptDirectory = application.getFile(ScriptDirectory + database)
          Files.createDirectory(scriptDirectory)
          val createStates : Set[Iterator[String]]= ddls.map(_.createStatements)
          val dropStates   : Set[Iterator[String]]= ddls.map(_.dropStatements)
	  println("")
	  println("########################### Global.scala ###########################################")      
          //println("ddls : " + createStates.getClass) 
	  println("[createStatements] => " + ddls.map(_.createStatements).flatten.mkString("\n\n")) 
          writeScript(createStates, scriptDirectory, CreateScript)
          
	  println("[dropStatements] => " + ddls.map(_.dropStatements).flatten.mkString("\n\n")) 
          writeScript(dropStates, scriptDirectory, DropScript)
	  println("########################### Global.scala ###########################################")      
	  println("")
        }
      }
    }
  }

  /**
   * Writes the given DDL statements to a file.
   */
  private def writeScript(ddlStatements: Set[Iterator[String]], directory: File, fileName: String): Unit = {
    val createScript = new File(directory, fileName)
    val createSql = ddlStatements.flatten.mkString("\n\n")
    println("Writing to " + directory + "/" + fileName)
    Files.writeFileIfChanged(createScript, ScriptHeader + createSql)
  }
}
